// generated by jwg -output model_json.go -transcripttag swagger .; DO NOT EDIT

package main

import (
	"encoding/json"
	"time"
)

// TodoJSON is jsonized struct for Todo.
type TodoJSON struct {
	ID        int64     `json:"id,omitempty,string"`
	Text      string    `json:"text,omitempty" swagger:",req"`
	Done      bool      `json:"done,omitempty"`
	CreatedAt time.Time `json:"createdAt,omitempty"`
}

// TodoJSONList is synonym about []*TodoJSON.
type TodoJSONList []*TodoJSON

// TodoPropertyEncoder is property encoder for [1]sJSON.
type TodoPropertyEncoder func(src *Todo, dest *TodoJSON) error

// TodoPropertyDecoder is property decoder for [1]sJSON.
type TodoPropertyDecoder func(src *TodoJSON, dest *Todo) error

// TodoPropertyInfo stores property information.
type TodoPropertyInfo struct {
	fieldName string
	jsonName  string
	Encoder   TodoPropertyEncoder
	Decoder   TodoPropertyDecoder
}

// FieldName returns struct field name of property.
func (info *TodoPropertyInfo) FieldName() string {
	return info.fieldName
}

// JSONName returns json field name of property.
func (info *TodoPropertyInfo) JSONName() string {
	return info.jsonName
}

// TodoJSONBuilder convert between Todo to TodoJSON mutually.
type TodoJSONBuilder struct {
	_properties        map[string]*TodoPropertyInfo
	_jsonPropertyMap   map[string]*TodoPropertyInfo
	_structPropertyMap map[string]*TodoPropertyInfo
	ID                 *TodoPropertyInfo
	Text               *TodoPropertyInfo
	Done               *TodoPropertyInfo
	CreatedAt          *TodoPropertyInfo
}

// NewTodoJSONBuilder make new TodoJSONBuilder.
func NewTodoJSONBuilder() *TodoJSONBuilder {
	jb := &TodoJSONBuilder{
		_properties:        map[string]*TodoPropertyInfo{},
		_jsonPropertyMap:   map[string]*TodoPropertyInfo{},
		_structPropertyMap: map[string]*TodoPropertyInfo{},
		ID: &TodoPropertyInfo{
			fieldName: "ID",
			jsonName:  "id",
			Encoder: func(src *Todo, dest *TodoJSON) error {
				if src == nil {
					return nil
				}
				dest.ID = src.ID
				return nil
			},
			Decoder: func(src *TodoJSON, dest *Todo) error {
				if src == nil {
					return nil
				}
				dest.ID = src.ID
				return nil
			},
		},
		Text: &TodoPropertyInfo{
			fieldName: "Text",
			jsonName:  "text",
			Encoder: func(src *Todo, dest *TodoJSON) error {
				if src == nil {
					return nil
				}
				dest.Text = src.Text
				return nil
			},
			Decoder: func(src *TodoJSON, dest *Todo) error {
				if src == nil {
					return nil
				}
				dest.Text = src.Text
				return nil
			},
		},
		Done: &TodoPropertyInfo{
			fieldName: "Done",
			jsonName:  "done",
			Encoder: func(src *Todo, dest *TodoJSON) error {
				if src == nil {
					return nil
				}
				dest.Done = src.Done
				return nil
			},
			Decoder: func(src *TodoJSON, dest *Todo) error {
				if src == nil {
					return nil
				}
				dest.Done = src.Done
				return nil
			},
		},
		CreatedAt: &TodoPropertyInfo{
			fieldName: "CreatedAt",
			jsonName:  "createdAt",
			Encoder: func(src *Todo, dest *TodoJSON) error {
				if src == nil {
					return nil
				}
				dest.CreatedAt = src.CreatedAt
				return nil
			},
			Decoder: func(src *TodoJSON, dest *Todo) error {
				if src == nil {
					return nil
				}
				dest.CreatedAt = src.CreatedAt
				return nil
			},
		},
	}
	jb._structPropertyMap["ID"] = jb.ID
	jb._jsonPropertyMap["id"] = jb.ID
	jb._structPropertyMap["Text"] = jb.Text
	jb._jsonPropertyMap["text"] = jb.Text
	jb._structPropertyMap["Done"] = jb.Done
	jb._jsonPropertyMap["done"] = jb.Done
	jb._structPropertyMap["CreatedAt"] = jb.CreatedAt
	jb._jsonPropertyMap["createdAt"] = jb.CreatedAt
	return jb
}

// Properties returns all properties on TodoJSONBuilder.
func (b *TodoJSONBuilder) Properties() []*TodoPropertyInfo {
	return []*TodoPropertyInfo{
		b.ID,
		b.Text,
		b.Done,
		b.CreatedAt,
	}
}

// AddAll adds all property to TodoJSONBuilder.
func (b *TodoJSONBuilder) AddAll() *TodoJSONBuilder {
	b._properties["ID"] = b.ID
	b._properties["Text"] = b.Text
	b._properties["Done"] = b.Done
	b._properties["CreatedAt"] = b.CreatedAt
	return b
}

// Add specified property to TodoJSONBuilder.
func (b *TodoJSONBuilder) Add(infos ...*TodoPropertyInfo) *TodoJSONBuilder {
	for _, info := range infos {
		b._properties[info.fieldName] = info
	}
	return b
}

// AddByJSONNames add properties to TodoJSONBuilder by JSON property name. if name is not in the builder, it will ignore.
func (b *TodoJSONBuilder) AddByJSONNames(names ...string) *TodoJSONBuilder {
	for _, name := range names {
		info := b._jsonPropertyMap[name]
		if info == nil {
			continue
		}
		b._properties[info.fieldName] = info
	}
	return b
}

// AddByNames add properties to TodoJSONBuilder by struct property name. if name is not in the builder, it will ignore.
func (b *TodoJSONBuilder) AddByNames(names ...string) *TodoJSONBuilder {
	for _, name := range names {
		info := b._structPropertyMap[name]
		if info == nil {
			continue
		}
		b._properties[info.fieldName] = info
	}
	return b
}

// Remove specified property to TodoJSONBuilder.
func (b *TodoJSONBuilder) Remove(infos ...*TodoPropertyInfo) *TodoJSONBuilder {
	for _, info := range infos {
		delete(b._properties, info.fieldName)
	}
	return b
}

// RemoveByJSONNames remove properties to TodoJSONBuilder by JSON property name. if name is not in the builder, it will ignore.
func (b *TodoJSONBuilder) RemoveByJSONNames(names ...string) *TodoJSONBuilder {

	for _, name := range names {
		info := b._jsonPropertyMap[name]
		if info == nil {
			continue
		}
		delete(b._properties, info.fieldName)
	}
	return b
}

// RemoveByNames remove properties to TodoJSONBuilder by struct property name. if name is not in the builder, it will ignore.
func (b *TodoJSONBuilder) RemoveByNames(names ...string) *TodoJSONBuilder {
	for _, name := range names {
		info := b._structPropertyMap[name]
		if info == nil {
			continue
		}
		delete(b._properties, info.fieldName)
	}
	return b
}

// Convert specified non-JSON object to JSON object.
func (b *TodoJSONBuilder) Convert(orig *Todo) (*TodoJSON, error) {
	if orig == nil {
		return nil, nil
	}
	ret := &TodoJSON{}

	for _, info := range b._properties {
		if err := info.Encoder(orig, ret); err != nil {
			return nil, err
		}
	}

	return ret, nil
}

// ConvertList specified non-JSON slice to JSONList.
func (b *TodoJSONBuilder) ConvertList(orig []*Todo) (TodoJSONList, error) {
	if orig == nil {
		return nil, nil
	}

	list := make(TodoJSONList, len(orig))
	for idx, or := range orig {
		json, err := b.Convert(or)
		if err != nil {
			return nil, err
		}
		list[idx] = json
	}

	return list, nil
}

// Convert specified JSON object to non-JSON object.
func (orig *TodoJSON) Convert() (*Todo, error) {
	ret := &Todo{}

	b := NewTodoJSONBuilder().AddAll()
	for _, info := range b._properties {
		if err := info.Decoder(orig, ret); err != nil {
			return nil, err
		}
	}

	return ret, nil
}

// Convert specified JSONList to non-JSON slice.
func (jsonList TodoJSONList) Convert() ([]*Todo, error) {
	orig := ([]*TodoJSON)(jsonList)

	list := make([]*Todo, len(orig))
	for idx, or := range orig {
		obj, err := or.Convert()
		if err != nil {
			return nil, err
		}
		list[idx] = obj
	}

	return list, nil
}

// Marshal non-JSON object to JSON string.
func (b *TodoJSONBuilder) Marshal(orig *Todo) ([]byte, error) {
	ret, err := b.Convert(orig)
	if err != nil {
		return nil, err
	}
	return json.Marshal(ret)
}
